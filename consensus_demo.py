# -*- coding: utf-8 -*-
"""consensus_demo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mAXGqgyI0BflS3rPXRT9-4lLvOpVtCdp
"""

import random

# Simulate 3 validators with different attributes
validators = {
    'miner_A': {'power': random.randint(50, 100)},
    'staker_B': {'stake': random.randint(50, 100)},
    'staker_C': {'stake': random.randint(50, 100)},
}

voters = ['account_1', 'account_2', 'account_3']
delegates = ['delegate_X', 'delegate_Y', 'delegate_Z']

# Proof of Work (PoW)
pow_winner = max(validators.items(), key=lambda x: x[1].get('power', 0))
print(f"PoW Winner: {pow_winner[0]} with Power {pow_winner[1]['power']}")
print("Explanation: In PoW, the miner with the highest computational power wins.\n")

# Proof of Stake (PoS)
pos_winner = max(validators.items(), key=lambda x: x[1].get('stake', 0))
print(f"PoS Winner: {pos_winner[0]} with Stake {pos_winner[1]['stake']}")
print("Explanation: In PoS, the validator with the highest stake wins.\n")

# Delegated Proof of Stake (DPoS)
# Simulating votes: each voter votes randomly
votes = {delegate: 0 for delegate in delegates}
for voter in voters:
    vote = random.choice(delegates)
    votes[vote] += 1

# Find delegate with most votes
dpos_winner = max(votes.items(), key=lambda x: x[1])
print(f"DPoS Winner: {dpos_winner[0]} with {dpos_winner[1]} votes")
print("Explanation: In DPoS, voters select delegates, and the one with most votes is chosen.\n")